Create server folder
Open terminal in server folder and run npm init. In the entry point write server.js -> After running package.json will be generated 
Now do "npm i bcryptjs cookie-parser cors dotenv express ioredis jsonwebtoken mongoose ts-node-dev @types/bcryptjs @types/cookie-parser @types/cors @types/express @types/jsonwebtoken @types/node typescript" in terminal
Create app.ts -> server.ts
Add "dev": "ts-node-dev --respawn --transpile-only src/server.ts" to package.

Add tsconfig.json file to compile typescript, otherwise it will give error (not shown in video)

Now after writing some basic routes in app.ts we create utils folder and create db.ts

Use upstash for connecting redis

Open mongodb site -> create new project -> create database -> give any cluster name -> connect -> give username and password -> add ip address 0.0.0.0/0 (it allows our site to be viewed around the world as its a whitelist IP address) -> click connect -> Mongo DB for vs code -> get the mongodb uri and paste it in env
In URI write collection name eg. "/LMS" after uri

create redis database

Now write db connection in utils/db.ts 

Create redis.ts and write redis connection

Now create ErrorHandler.ts for backend error handling: This will be used if user enters wrong password, doesn't fill correct details etc. We will pass an error message and a status code from ErrorHandler.ts , in that file we write classes, and whenever we require error handling we just create object of the classes by passing parameters.

Create middleware folder and write error.ts

Use errorMiddleware in app.ts

Create catchAsyncErrors.ts in middleware folder to shortcut our code as we will use async function many times

Now create models folder -> create user_model.ts

Create controllers folder -> create user_controller.ts

do npm i ejs nodemailer for sending email 
do npm i --save-dev @types/ejs

create folder mails -> create activationmail.ejs->create template for mail(simple html code,just the dynamic parameters is shown by angle bracket and %)

In utils folder create sendMail.ts for sending mail
now in env file write the SMTP parameters.. the password can be got by the steps : go to manage your google account -> search app password -> create an app named nodemailer

complete user_controller.ts by importing sendMail.ts

Now create routes folder and create user_routes.ts 

Now test the apis

Write active user code in user_controller.ts

Add activate-user route to user_routes.ts

test activate-user api by sending json data of activation_code and activation_token

Now in env add ACCESS_TOKEN AND REFRESH_TOKEN and add the fields by copying password from password generator online

Now come to user_model.ts and update interface and write signAccessToken and signRefreshToken fn 

Authentication plan understand by diagram :
First user will give email & password -> server validates and send two cookie(ACCESS_TOKEN and REFRESH_TOKEN) to the browser -> user logs in -> access token will expire after 10min -> then again if user tries to login then REFRESH_TOKEN will get another new ACCESS_TOKEN from server -> with that user can enter 

Write login user in user_controller.ts

Now create jwt.ts in utils

add login api to user routes and test it. See that after getting response there are two cookies also

Now write logoutUser fn in user_controller.ts and test logout api

now create protected route. Create auth.ts in middleware folder 
for auth.ts create @types folder within server and then create custom.d.ts 

Write redis cache delete in logout fn in user_controller.ts

In auth.ts write validate user role fn
In user_controller.ts write update access token fn. This will refresh the access token in every 5min, so the authentication system is hack proof. This kind of auth system is used by facebook, insta as told by sir

Add new user routes '/refresh' and test it

To create get user info:
Create services folder and create user.service.ts

Now write get user info in user_controller.ts

Create route '/me' and test

Create social auth in user_controller.ts and then add the route user_routes.ts and test.

create update user info in user_controller.ts , this is for if user wants to update name,email

create update user info route in user route and test: see updation occurs in both mongodb and redis


Now create update password fn in user_controller.ts

now update profile pic in user_controller.ts

Write cloudinary connection in server.ts
Test update profile pic api


Now I am starting to design course section 



-Start from: 3:21:30
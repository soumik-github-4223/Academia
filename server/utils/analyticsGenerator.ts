import { Document,Model } from "mongoose";

interface MonthData{
    month: string;
    count: number;
}

// Function to generate the last 12 months data
// This function takes a mongoose model as input and returns the data of the last 12 months
// The data contains the month and the count of documents created in that month
// The data is returned in the form of an array of objects
// Each object contains the month and the count of documents created in that month
// The data is generated by counting the documents created in each month
// we are considering a month to be of 28 days
 
export async function generateLast12MonthsData<T extends Document>(model:Model<T>): Promise<{last12Months:MonthData[]}>{

    const last12Months:MonthData[]=[]
    const currentDate=new Date();
    currentDate.setDate(currentDate.getDate()+1);

    for(let i=11;i>=0;i--){
        const endDate=new Date(currentDate.getFullYear(),currentDate.getMonth(),currentDate.getDate()-i*28);

        const startDate=new Date(endDate.getFullYear(),endDate.getMonth(),endDate.getDate()-28);

        const monthYear=endDate.toLocaleString('default',{day:"numeric",month:"short",year:"numeric"});

        const count=await model.countDocuments({
            createdAt:{
                $gte:startDate,
                $lt:endDate
            }
        })

        last12Months.push({month:monthYear,count});

    }

    return {last12Months}
}








